# -*- coding: utf-8 -*-
import json
import os
import random
import time

SCORES_FILE = "scores.json"

DIFFICULTIES = {
    "1": {"name": "F√°cil",   "min": 1,   "max": 20,   "attempts": 8},
    "2": {"name": "Normal",  "min": 1,   "max": 50,   "attempts": 7},
    "3": {"name": "Dif√≠cil", "min": 1,   "max": 100,  "attempts": 7},
    "4": {"name": "Extremo", "min": 1,   "max": 500,  "attempts": 9},
}

def clear():
    # Limpia pantalla (simple)
    os.system("clear" if os.name == "posix" else "cls")

def pause(msg="Pulsa Enter para continuar..."):
    input(msg)

def load_scores():
    if not os.path.exists(SCORES_FILE):
        return []
    try:
        with open(SCORES_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return []

def save_scores(scores):
    try:
        with open(SCORES_FILE, "w", encoding="utf-8") as f:
            json.dump(scores, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"[!] No se pudo guardar la tabla de r√©cords: {e}")

def show_scores(scores, top=10):
    if not scores:
        print("\nüìÑ A√∫n no hay r√©cords. ¬°S√© la primera en lograr uno! üèÜ")
        return
    print("\nüèÜ TOP r√©cords")
    print("-" * 40)
    # Ordenar por puntos descendente
    ordered = sorted(scores, key=lambda s: s["score"], reverse=True)[:top]
    for i, s in enumerate(ordered, 1):
        print(f"{i:2d}. {s['player']:<15} ‚Äî {s['difficulty']:<8} ‚Äî {s['score']} pts  ‚Äî {s['attempts']} intentos")
    print("-" * 40)

def hot_cold_hint(secret, guess):
    diff = abs(secret - guess)
    if diff == 0:
        return "¬°Exacto!"
    if diff <= 2:
        return "üî• Muy caliente"
    if diff <= 5:
        return "üî• Caliente"
    if diff <= 10:
        return "üå∂Ô∏è Tibio"
    if diff <= 20:
        return "‚ùÑÔ∏è Fr√≠o"
    return "üßä Muy fr√≠o"

def calc_score(difficulty_key, attempts_used, time_secs):
    # Puntuaci√≥n simple: base por dificultad + bonus por rapidez + bonus por intentos sobrantes
    base = {"1": 100, "2": 200, "3": 350, "4": 600}[difficulty_key]
    speed_bonus = max(0, int(120 - time_secs))  # hasta 120 seg de bonus
    leftover_bonus = max(0, 10 - attempts_used) * 10
    return max(1, base + speed_bonus + leftover_bonus)

def pick_difficulty():
    clear()
    print("üß© Adivinanza Pro ‚Äî Selecciona dificultad\n")
    for k, d in DIFFICULTIES.items():
        print(f"{k}) {d['name']:8} | Rango {d['min']}-{d['max']} | Intentos: {d['attempts']}")
    print("0) Volver")
    while True:
        choice = input("\nElige una opci√≥n: ").strip()
        if choice == "0":
            return None
        if choice in DIFFICULTIES:
            return choice
        print("Opci√≥n no v√°lida. Intenta de nuevo.")

def play_round(player_name, difficulty_key, scores):
    dcfg = DIFFICULTIES[difficulty_key]
    low, high, tries = dcfg["min"], dcfg["max"], dcfg["attempts"]
    secret = random.randint(low, high)
    attempts = 0
    start = time.time()

    clear()
    print(f"üéØ {player_name}, estoy pensando en un n√∫mero entre {low} y {high}.")
    print(f"Tienes {tries} intentos. ¬°Mucha suerte!\n")

    while attempts < tries:
        raw = input(f"Intento {attempts+1}/{tries} ‚Üí Escribe un n√∫mero: ").strip()
        try:
            guess = int(raw)
        except ValueError:
            print("Por favor, escribe un n√∫mero v√°lido.\n")
            continue

        if not (low <= guess <= high):
            print(f"Debe estar entre {low} y {high}.\n")
            continue

        attempts += 1

        if guess == secret:
            elapsed = time.time() - start
            score = calc_score(difficulty_key, attempts, elapsed)
            print(f"\nüéâ ¬°Correcto! El n√∫mero era {secret}.")
            print(f"‚è±Ô∏è Tiempo: {elapsed:.1f}s   üßÆ Intentos usados: {attempts}   ‚≠ê Puntuaci√≥n: {score}\n")

            scores.append({
                "player": player_name,
                "difficulty": DIFFICULTIES[difficulty_key]["name"],
                "score": score,
                "attempts": attempts,
            })
            save_scores(scores)
            return True

        # Pistas
        arrow = "‚¨ÜÔ∏è m√°s grande" if guess < secret else "‚¨áÔ∏è m√°s peque√±o"
        temp = hot_cold_hint(secret, guess)
        print(f"{arrow} | {temp}\n")

    print(f"\nüí• Te quedaste sin intentos. El n√∫mero era {secret}. ¬°A la pr√≥xima!")
    return False

def main_menu():
    scores = load_scores()
    player_name = ""

    while True:
        clear()
        print("üéÆ ADIVINANZA PRO")
        print("-----------------")
        print("1) Jugar")
        print("2) Ver r√©cords")
        print("3) Cambiar nombre de jugador")
        print("4) Cr√©ditos")
        print("0) Salir")
        choice = input("\nElige una opci√≥n: ").strip()

        if choice == "1":
            if not player_name:
                player_name = input("Escribe tu nombre de jugadora: ").strip() or "Lulu"
            diff = pick_difficulty()
            if diff is None:
                continue
            play_round(player_name, diff, scores)
            pause()
        elif choice == "2":
            clear()
            show_scores(scores)
            pause()
        elif choice == "3":
            player_name = input("Nuevo nombre: ").strip() or "Lulu"
            print(f"‚úîÔ∏è Nombre establecido como: {player_name}")
            pause()
        elif choice == "4":
            clear()
            print("Hecho con üêç Python y ‚ù§Ô∏è por Lulu.\n¬°Listo para GitHub!")
            pause()
        elif choice == "0":
            print("\n¬°Hasta luego! üëã")
            break
        else:
            print("Opci√≥n no v√°lida.")
            pause()

if __name__ == "__main__":
    main_menu()